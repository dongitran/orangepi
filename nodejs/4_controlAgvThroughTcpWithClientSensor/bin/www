#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('4-controlagvthroughmodbuswithclientsensor:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
// create an empty modbus client
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

// This line is from the Node.js HTTPS documentation.
var options = {
  key: fs.readFileSync('C:/Users/ITHC/AppData/Local/Code/orangepi/nodejs/3_httpsServer/bin/key.pem'),
  cert: fs.readFileSync('C:/Users/ITHC/AppData/Local/Code/orangepi/nodejs/3_httpsServer/bin/cert.pem')
};

/**
 * Create HTTPs server.
 */

var server = https.createServer(options, app);


// open connection to a serial port

var isSending = false;
// Socket io
const io = require('socket.io')(server);
//Whenever someone connects this gets executed
io.on('connection', function(socket) {
  console.log('A user connected');

  //socket.send("Hello!!");

  //Whenever someone disconnects this piece of code executed
  socket.on('disconnect', function () {
     console.log('A user disconnected');
  });

  socket.on('message', (msg)=>{
    console.log('MR- ' + msg);
    let obj = JSON.parse(msg);
    if(isSending == false){
      isSending = true;
      
    }    
  });
});
var counter = 0;
function sendtest(){
  counter++;
  
}
//setTimeout(sendtest, 2000);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

 